name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-deb:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper dh-python python3-all python3-setuptools devscripts
        
    - name: Build Debian package
      run: |
        # Set version from tag or use default
        VERSION=${GITHUB_REF#refs/tags/v}
        if [ "$VERSION" = "$GITHUB_REF" ]; then
          VERSION="0.1.0"
        fi
        
        # Set email for changelog
        export DEBEMAIL="myself@mariusv.com"
        export DEBFULLNAME="Marius Voila"
        
        # Only update changelog if version differs
        CURRENT_VERSION=$(dpkg-parsechangelog -S Version)
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          dch -v ${VERSION} -D unstable "Release version ${VERSION}"
        fi
        
        # Build the package (use -d to skip build dep checks since we installed them manually)
        dpkg-buildpackage -us -uc -b -d
        
        # Move the built package
        mv ../cloudflare-ddns-updater_*.deb .
        
    - name: Test package installation
      run: |
        sudo dpkg -i cloudflare-ddns-updater_*.deb || sudo apt-get install -f -y
        # Verify files are installed
        test -f /usr/bin/cloudflare-ddns
        test -f /lib/systemd/system/cloudflare-ddns.service
        test -f /lib/systemd/system/cloudflare-ddns.timer
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: cloudflare-ddns-updater_*.deb
        generate_release_notes: true
        
    - name: Build container image
      run: |
        # Build the image using the Dockerfile in the repo
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Push container image
      if: github.event_name != 'pull_request'
      run: |
        # Also tag with version if this is a tag
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
        fi
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest